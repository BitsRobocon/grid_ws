bot_grid_controller:
  # Publish all joint states -----------------------------------
  joint_state_controller:
    type: joint_state_controller/JointStateController
    publish_rate: 50

  # Position Controllers --------------------------------------
  Rev3_position_controller:
    type: effort_controllers/JointPositionController
    joint: Rev3
    pid: {p: 100.0, i: 0.01, d: 10.0}
  
  # Velocity Controllers --------------------------------------
  bot_velocity_controller:
    type: diff_drive_controller/DiffDriveController
    left_wheel: 'wheel_left_1'
    right_wheel: 'wheel_right_1'
    publish_rate: 50
    pose_covariance_diagonal: [0, 0, 0, 0, 0, 0]
    twist_covariance_diagonal: [0, 0, 0, 0, 0, 0]
    cmd_vel_timeout: 0.25
    velocity_rolling_window_size: 5

    # Base Frame id -------------
    base_frame_id: base_link

    # After publishing the camera telemetry by robot_localization
    # there shouldn't be a need to publish a TF based on wheel encoders.
    # Wheel encoders are absent as well.
    enable_odom_tf: false

    # Without encoders there is no way to determine the wheel velocities
    # For now we will keep this false, since we want the adaptive controller
    # to estimate the wheel velocities.
    estimate_velocity_from_position: false

    # Wheel separation and radius multipliers.
    # Scale factors between the simulated and the actual robot.
    wheel_separation_multiplier: 1 # Default: 1.0
    wheel_radius_multipler: 1 # Default: 1.0

    # Wheel separation and radius.
    # diff_drive_controller will attempt to read either one or both from the
    # URDF if not specified as a parameter
    wheel_separation : 0.128 # m
    wheel_radius : 0.0215 # m

    # Velocity and acceleration limits
    # Whenever a min_* is unspecified, it defaults to -max_*
    linear:
      x:
        has_velocity_limits    : true
        max_velocity           : 1.0   # m/s
        has_acceleration_limits: true
        max_acceleration       : 3.0   # m/s^2
    angular:
      z:
        has_velocity_limits    : true
        max_velocity           : 2.0   # rad/s
        has_acceleration_limits: true
        max_acceleration       : 6.0   # rad/s^2